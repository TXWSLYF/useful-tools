{"version":3,"sources":["components/UrlDecode/JsonShow.jsx","components/UrlDecode/UrlDecode.jsx","App.js","serviceWorker.js","index.js"],"names":["JsonShow","decodeUrl","str","trim","out","split","forEach","i","tmp","decodeURIComponent","inputValue","this","props","map","react_default","a","createElement","className","Object","keys","Component","UrlDecode","state","handleVlaueChage","e","_this","setState","target","value","onChange","JsonShow_JsonShow","App","react_router_dom","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAGqBA,0NACnBC,UAAY,SAACC,GACX,IAAKA,EAAIC,OAAQ,MAAO,GACxB,IAAIC,EAAM,GAKV,OAJAF,EAAIG,MAAM,KAAKC,QAAQ,SAACC,GACtB,IAAMC,EAAMD,EAAEF,MAAM,KACpBD,EAAII,EAAI,IAAMC,mBAAmBD,EAAI,MAEhCJ,2EAGA,IACCM,EAAeC,KAAKC,MAApBF,WACFG,EAAMF,KAAKV,UAAUS,GAE3B,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACZC,OAAOC,KAAKN,GAAKA,IAAI,SAACN,GAAD,OACpBO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCV,EAAnC,WACAO,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,IAAqCJ,EAAIN,GAAzC,gBApB0Ba,cCsCvBC,6MApCbC,MAAQ,CACNZ,WACE,mFAGJa,iBAAmB,SAACC,GAGlBC,EAAKC,SAAS,CACZhB,WAAYc,EAAEG,OAAOC,WAIzB3B,UAAY,SAACC,GACX,IAAKA,EAAIC,OAAQ,MAAO,GACxB,IAAIC,EAAM,GAKV,OAJAF,EAAIG,MAAM,KAAKC,QAAQ,SAACC,GACtB,IAAMC,EAAMD,EAAEF,MAAM,KACpBD,EAAII,EAAI,IAAMC,mBAAmBD,EAAI,MAEhCJ,2EAIP,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,YACEa,SAAUlB,KAAKY,iBACfK,MAAOjB,KAAKW,MAAMZ,aAEpBI,EAAAC,EAAAC,cAACc,EAAD,CAAUpB,WAAYC,KAAKW,MAAMZ,qBA/BjBU,aCUTW,MAVf,WACE,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,KAAK,aAAaC,UAAWd,OCIxBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a166d9e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './JsonShow.css';\n\nexport default class JsonShow extends Component {\n  decodeUrl = (str) => {\n    if (!str.trim()) return '';\n    let out = {};\n    str.split('&').forEach((i) => {\n      const tmp = i.split('=');\n      out[tmp[0]] = decodeURIComponent(tmp[1]);\n    });\n    return out;\n  };\n\n  render() {\n    const { inputValue } = this.props;\n    const map = this.decodeUrl(inputValue);\n\n    return (\n      <div className=\"json-show-container\">\n        {Object.keys(map).map((i) => (\n          <div className=\"json-item\">\n            <span className=\"json-item__key\">\"{i}\"ï¼š</span>\n            <span className=\"json-item__value\">\"{map[i]}\"</span>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './UrlDecode.css';\nimport JsonShow from './JsonShow';\n\nclass UrlDecode extends Component {\n  state = {\n    inputValue:\n      'r=api/service/IsSmallFlowNormalMix&title=maggie_say_control&workplace_id=1014',\n  };\n\n  handleVlaueChage = (e) => {\n    // const tmp = this.decodeUrl(e.target.value);\n    // const str = JSON.stringify(tmp, null, 10).replace(/\\\\/g, '')\n    this.setState({\n      inputValue: e.target.value,\n    });\n  };\n\n  decodeUrl = (str) => {\n    if (!str.trim()) return '';\n    let out = {};\n    str.split('&').forEach((i) => {\n      const tmp = i.split('=');\n      out[tmp[0]] = decodeURIComponent(tmp[1]);\n    });\n    return out;\n  };\n\n  render() {\n    return (\n      <div className=\"url-decode-container\">\n        <textarea\n          onChange={this.handleVlaueChage}\n          value={this.state.inputValue}\n        />\n        <JsonShow inputValue={this.state.inputValue} />\n      </div>\n    );\n  }\n}\n\nexport default UrlDecode;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport UrlDecode from './components/UrlDecode/UrlDecode';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route path=\"/urlDecode\" component={UrlDecode} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}